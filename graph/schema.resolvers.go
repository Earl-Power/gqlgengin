package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"fmt"
	"github.com/Earl-Power/gqlgengin/internal/auth"
	"github.com/Earl-Power/gqlgengin/internal/links"
	"github.com/Earl-Power/gqlgengin/internal/pkg/jwt"
	"github.com/Earl-Power/gqlgengin/internal/users"
	"strconv"

	"github.com/Earl-Power/gqlgengin/graph/model"
)

func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	var link links.Link
	link.Title = input.Title
	link.Address = input.Address
	user := auth.ForContext(ctx)

	if user == nil {
		return &model.Link{}, fmt.Errorf("access denied")
	}

	link.User = user
	linkID := link.Save()
	graphqlUser := &model.User{
		ID:   &user.ID,
		Name: user.Username,
	}

	// 错误引用
	// return &model.Link{ID: strconv.FormatInt(linkID, 10), Title: link.Title, Address: link.Address}, nil
	// 指针类型引用
	var ConvertLinkID = strconv.FormatInt(linkID, 10)
	return &model.Link{ID: &ConvertLinkID, Title: link.Title, Address: link.Address, User: graphqlUser}, nil
}

/*
mutation NeedTokenViewer{
  createLink(input: {title: "real link!", address: "www.graphql.org"}){
    user{
      name
    }
  }
}

Headers
{
  "Authorization": "OWN TOKEN"
}
*/

/*
mutation NewCreateLink{
  createLink(input: {title: "earl_title", address: "earl_address"}){
    title,
    address,
    id,
  }
}
*/

//func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
//	var link model.Link
//	var user model.User
//	link.Address = input.Address
//	link.Title = input.Title
//	user.Name = "test"
//	link.User = &user
//	return &link, nil
//}

/*
mutation createLink{
  createLink(input: {title: "new link", address:"https://address.org"}){
    title,
    user{
      name
    }
    address
  }
}
*/

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	// panic(fmt.Errorf("not implemented: CreateUser - createUser"))
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	user.Create()
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	// panic(fmt.Errorf("not implemented: Login - login"))
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	correct := user.Authenticate()
	if !correct {
		return "", &users.WrongUsernameOrPasswordError{}
	}

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	// panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("access denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Links data from database
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var resultLinks []*model.Link
	var dblinks []links.Link
	dblinks = links.GetAll()
	for _, link := range dblinks {
		graphqlUser := &model.User{
			ID:   &link.User.ID,
			Name: link.User.Username,
		}
		var ConvertID = link.ID
		resultLinks = append(resultLinks, &model.Link{ID: &ConvertID, Title: link.Title, Address: link.Address, User: graphqlUser})
	}
	return resultLinks, nil
}

/*
query links_From_DB{
  links {
    title
    address
    id
  }
}
*/

// localhost data test
/*
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var links []*model.Link
	dummyLink := model.Link{
		Title:   "our dummy link",
		Address: "https://address.org",
		User:    &model.User{Name: "admin"},
	}
	links = append(links, &dummyLink)
	return links, nil
}

/*
query links {
	links{
    title
    address,
    user{
      name
    }
  }
}
*/

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// Default CreateLink function
// CreateLink is the resolver for the createLink field.
//func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
//	panic(fmt.Errorf("not implemented: CreateLink - createLink"))
//}

// Default Links function
// Links is the resolver for the links field.
//func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
//	panic(fmt.Errorf("not implemented: Links - links"))
//}
